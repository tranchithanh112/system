<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<PAL1131 version="1.0">
  <PROJECT name="XP37">
    <METRIC>
      <COMPANY><![CDATA[]]></COMPANY>
      <MANAGER><![CDATA[]]></MANAGER>
      <VERSION><![CDATA[]]></VERSION>
      <SUBJECT><![CDATA[]]></SUBJECT>
      <CREATED year="2010" month="11" day="2" hour="17" minutes="30" seconds="32" milisec="115" />
    </METRIC>
    <OPTIONS>
      <PV value="000005C2" />
      <II value="00000038" />
      <PAL1131G used="1" />
      <LC year="2019" month="8" day="29" hour="15" minutes="30" seconds="24" milisec="323" />
      <LCF>
        <ABSOLUTE>D:\Software\System\PAL1131\VM\VM-Praxis-TFT57.xml</ABSOLUTE>
        <APPVARS>$VMsDir\VM-Praxis-TFT57.xml</APPVARS>
        <ENVVARS>D:\Software\System\PAL1131\VM\VM-Praxis-TFT57.xml</ENVVARS>
      </LCF>
      <CREATOR>1.0</CREATOR>
      <LASTSAVEDWITH>1.1.5.2</LASTSAVEDWITH>
      <DCP>
        <ABSOLUTE>D:\SOFTWARE\SYSTEM\SETUP\XP\XP37\Pal1131_XP37.dcp</ABSOLUTE>
        <APPVARS>D:\SOFTWARE\SYSTEM\SETUP\XP\XP37\Pal1131_XP37.dcp</APPVARS>
        <ENVVARS>D:\SOFTWARE\SYSTEM\SETUP\XP\XP37\Pal1131_XP37.dcp</ENVVARS>
      </DCP>
      <XCP>
        <ABSOLUTE>D:\SOFTWARE\SYSTEM\SETUP\XP\XP37\Pal1131_XP37.xcp</ABSOLUTE>
        <APPVARS>D:\SOFTWARE\SYSTEM\SETUP\XP\XP37\Pal1131_XP37.xcp</APPVARS>
        <ENVVARS>D:\SOFTWARE\SYSTEM\SETUP\XP\XP37\Pal1131_XP37.xcp</ENVVARS>
      </XCP>
      <HCP>
        <ABSOLUTE>D:\SOFTWARE\SYSTEM\SETUP\XP\XP37\Pal1131_XP37.hcp</ABSOLUTE>
        <APPVARS>D:\SOFTWARE\SYSTEM\SETUP\XP\XP37\Pal1131_XP37.hcp</APPVARS>
        <ENVVARS>D:\SOFTWARE\SYSTEM\SETUP\XP\XP37\Pal1131_XP37.hcp</ENVVARS>
      </HCP>
      <CST>
        <ABSOLUTE>D:\SOFTWARE\SYSTEM\SETUP\XP\XP37\Pal1131_XP37.cst</ABSOLUTE>
        <APPVARS>D:\SOFTWARE\SYSTEM\SETUP\XP\XP37\Pal1131_XP37.cst</APPVARS>
        <ENVVARS>D:\SOFTWARE\SYSTEM\SETUP\XP\XP37\Pal1131_XP37.cst</ENVVARS>
      </CST>
      <HCPFlags enabled="0" />
      <OverrideDefaultPaths enabled="0" />
    </OPTIONS>
    <LIBRARY>
      <PKG name="IEC_61131" version="131072" filename="D:\Software\System\PAL1131\Libraries\IEC 61131-3.lcp">
        <CREATED year="2018" month="10" day="19" hour="14" minutes="1" seconds="19" milisec="293" />
        <APPVARS>$LibDir\IEC 61131-3.lcp</APPVARS>
        <ENVVARS>D:\Software\System\PAL1131\Libraries\IEC 61131-3.lcp</ENVVARS>
        <IMP name="CTD" type="FBLK" />
        <IMP name="CTU" type="FBLK" />
        <IMP name="CTUD" type="FBLK" />
        <IMP name="F_TRIG" type="FBLK" />
        <IMP name="R_TRIG" type="FBLK" />
        <IMP name="RS" type="FBLK" />
        <IMP name="SEMA" type="FBLK" />
        <IMP name="SR" type="FBLK" />
        <IMP name="TOF" type="FBLK" />
        <IMP name="TON" type="FBLK" />
        <IMP name="TP" type="FBLK" />
      </PKG>
      <PKG name="Praxis_FUNC" version="131072" filename="D:\Software\System\PAL1131\Libraries\Praxis_FUNC.lcp">
        <CREATED year="2018" month="10" day="19" hour="14" minutes="1" seconds="21" milisec="169" />
        <APPVARS>$LibDir\Praxis_FUNC.lcp</APPVARS>
        <ENVVARS>D:\Software\System\PAL1131\Libraries\Praxis_FUNC.lcp</ENVVARS>
        <IMP name="FINT_TO_TIME" type="FUN" />
        <IMP name="TIME_TO_FINT" type="FUN" />
        <IMP name="FINT_TO_INT" type="FUN" />
        <IMP name="INT_TO_FINT" type="FUN" />
        <IMP name="DIV0" type="FUN" />
        <IMP name="ABS_FINT" type="FUN" />
        <IMP name="SQRT_FINT" type="FUN" />
        <IMP name="HZ_TO_RPM" type="FUN" />
        <IMP name="MAX_FINT" type="FUN" />
        <IMP name="MIN_FINT" type="FUN" />
        <IMP name="ANGLE180" type="FUN" />
        <IMP name="ANGLE360" type="FUN" />
        <IMP name="ATAN2" type="FUN" />
        <IMP name="DEG_TO_RAD" type="FUN" />
        <IMP name="RAD_TO_DEG" type="FUN" />
        <IMP name="SET_BIT" type="FUN" />
        <IMP name="GET_BIT" type="FUN" />
        <IMP name="RESET_BIT" type="FUN" />
      </PKG>
      <PKG name="PRAXIS_HW" version="131072" filename="D:\Software\System\PAL1131\Libraries\Praxis_HW.lcp">
        <CREATED year="2018" month="10" day="19" hour="14" minutes="1" seconds="20" milisec="98" />
        <APPVARS>$LibDir\Praxis_HW.lcp</APPVARS>
        <ENVVARS>D:\Software\System\PAL1131\Libraries\Praxis_HW.lcp</ENVVARS>
        <IMP name="HW_LOAD" type="FBLK" />
        <IMP name="HW_XP" type="FBLK" />
        <IMP name="HW_TIMING" type="FBLK" />
        <IMP name="HW_VERSIONS" type="FBLK" />
        <IMP name="HW_SCROLL_UP" type="FBLK" />
        <IMP name="HW_SCROLL_DOWN" type="FBLK" />
        <IMP name="HW_ACCEPT" type="FBLK" />
        <IMP name="HW_BUTTON_ID" type="FBLK" />
        <IMP name="HW_TOUCH_GET_THR" type="FBLK" />
        <IMP name="HW_TOUCH_SET_THR" type="FBLK" />
        <IMP name="HW_SET_ALT_LANG" type="FBLK" />
        <IMP name="HW_GET_ALT_LANG" type="FBLK" />
        <IMP name="HW_GET_ALARM_PULSE_ON_NEXT" type="FBLK" />
        <IMP name="HW_GET_UNACCEPT" type="FBLK" />
        <IMP name="HW_GET_UNACCEPT_ALM" type="FBLK" />
        <IMP name="HW_SET_TFT_PAGE" type="FBLK" />
        <IMP name="HW_GET_TFT_PAGE" type="FBLK" />
        <IMP name="HW_SET_TFT_FLASH" type="FBLK" />
        <IMP name="HW_DETACH_ELVR" type="FBLK" />
        <IMP name="HW_GETSTATUS_ELVR" type="FBLK" />
        <IMP name="HW_GETSTATUS_IOW24" type="FBLK" />
        <IMP name="HW_SPEED_ELVR" type="FBLK" />
        <IMP name="HW_STEER_ELVR" type="FBLK" />
        <IMP name="HW_MENU_PUBLIC_KEY" type="FBLK" />
        <IMP name="HW_MENU_FIRST_PAGE" type="FBLK" />
        <IMP name="HW_MENU_AFTER_LOGIN_PULSE" type="FBLK" />
        <IMP name="HW_MENU_PW_CHANGE" type="FBLK" />
        <IMP name="HW_GET_TFT_FLASH" type="FBLK" />
        <IMP name="HW_SET_RD_ACTIVE" type="FBLK" />
        <IMP name="HW_SET_WOODS_JIS" type="FBLK" />
        <IMP name="RETAIN_TO_FACTORY" type="FBLK" />
        <IMP name="FACTORY_TO_RETAIN" type="FBLK" />
        <IMP name="HW_GET_ALARM_PULSE_ON_NEXT_V02" type="FBLK" />
        <IMP name="HW_GET_UNACCEPT_V02" type="FBLK" />
        <IMP name="HW_GET_UNACCEPT_ALM_V02" type="FBLK" />
        <IMP name="HW_SET_TFT_ALM_SUM_DAY_WEEK_MON" type="FBLK" />
        <IMP name="SET_ORIENTATION" type="FBLK" />
        <IMP name="HW_SET_RD_COMPORT" type="FBLK" />
        <IMP name="LONG_FOLLOWUP" type="FBLK" />
        <IMP name="HW_MENU_TOUCH_FUNCTION" type="FBLK" />
        <IMP name="HW_MENU_TOUCH_BUTTON_PRESS" type="FBLK" />
        <IMP name="HW_GET_EAS_RESET_SIGNAL" type="FBLK" />
        <IMP name="HW_SET_TFT_GROUP_NR_PAGE" type="FBLK" />
        <IMP name="HW_ORD_PRN_SET_ON_OFF" type="FBLK" />
        <IMP name="HW_ORD_PRN_PERIODIC_PRINT" type="FBLK" />
        <IMP name="HW_ORD_PRN_PERIODIC_HOURS" type="FBLK" />
        <IMP name="HW_ORD_PRN_PRINT_STATUS" type="FBLK" />
        <IMP name="HW_SHOW_MENU_SET_DATE" type="FBLK" />
        <IMP name="HW_SHOW_MENU_SET_TIME" type="FBLK" />
        <IMP name="HW_FORCE_REDRAW_DISPLAY" type="FBLK" />
        <IMP name="HW_ORD_PRN_GET_STATUS_INFO" type="FBLK" />
        <IMP name="HW_TFT_EAS_SEND_STOP_HORN" type="FBLK" />
        <IMP name="HW_TFT_EAS_SEND_ACK" type="FBLK" />
      </PKG>
    </LIBRARY>
    <POU>
      <ITEM lang="ST" disabled="0" type="PRG" name="P01_GENERAL" editor="PAL1131.ST"><![CDATA[PROGRAM P01_GENERAL
 VAR_EXTERNAL (*$AUTO*) END_VAR
 
 VAR
	INIT			: BOOL := TRUE;
	I				: INT;
	CMD_MIMICo		: INT;
T: INT;	
	RESET 	: TON;
	
	DIMMING_STEP	: INT := 10;
	MAX_DIMMING		: INT := 99;
	
	B_DIMMING_INCR_TRIGGER	: R_TRIG;
	B_DIMMING_DECR_TRIGGER	: R_TRIG;

	//R_TRIGGERS FOR BUTTONS
	_B_WIPER_FWD_PS	: R_TRIG;
	_B_WIPER_FWD_C	: R_TRIG;
	_B_WIPER_FWD_SB	: R_TRIG;
	_B_WIPER_SIDE_PS: R_TRIG;
	_B_WIPER_SIDE_SB: R_TRIG;
	_B_WIPER_AFT_PS	: R_TRIG;
	_B_WIPER_AFT_C	: R_TRIG;
	_B_WIPER_AFT_SB	: R_TRIG;
	_B_WIPER_AFT_BOT: R_TRIG;
	
	DEV_MODE_TIMEOUT	: TON;

  DIMVAL                : FINT;
  DIM_PANEL             : BOOL;
  DIM_INS               : BOOL;
  OLD_DIM_PANEL_LEVEL   : FINT;
 END_VAR
 
 VAR_GLOBAL 
	
	
	SHOW_FRAME_1131G: INT;
	
	//HW BUTTONS ON THE TFT PANEL
	B1 : BOOL;
	B2 : BOOL;
	B3 : BOOL;
	B4 : BOOL;
	B5 : BOOL;
	B6 : BOOL;

	//BUTTONS TO OPEN POP UP MENU ON HOME SCREEN
	B_WASHING	 : BOOL;
	B_HEAT		 : BOOL;
	B_INTERVAL 	 : BOOL;
	B_SPEED		 : BOOL;

	//FUNCTIONALITY BUTTONS
	B_WASH_FWD			: BOOL;
	B_WASH_AFT			: BOOL;
	B_HEAT_FWD			: BOOL;
	B_HEAT_AFT			: BOOL;
	B_INTERVAL_INC	: BOOL;
	B_INTERVAL_DECR	: BOOL;
	B_SPEED_FWD			: BOOL;
	B_SPEED_AFT			: BOOL;
	B_GROUP_FWD			: BOOL;
	B_GROUP_AFT			: BOOL;
	B_INTERVAL_ACTIVE	: BOOL;
	B_STOP_ALL			: BOOL;
	
	//INDIVIDUAL WIPER BUTTONS ON 1131G
	B_WIPER_FWD_PS	: BOOL;
	B_WIPER_FWD_C	: BOOL;
	B_WIPER_FWD_SB	: BOOL;
	B_WIPER_SIDE_PS	: BOOL;
	B_WIPER_SIDE_SB	: BOOL;
	B_WIPER_AFT_PS	: BOOL;
	B_WIPER_AFT_C	: BOOL;
	B_WIPER_AFT_SB	: BOOL;
	B_WIPER_AFT_BOT	: BOOL;
	
	//CONFIG PAGE BUTTONS
	B_HOME			: BOOL;
	B_SELECT_UP		: BOOL;
	B_SELECT_DOWN	: BOOL;
	B_VALUE_INCR	: BOOL;
	B_VALUE_DECR	: BOOL;
	B_ACCEPT_VALUE	: BOOL;
	
	
	//BUTTON TRIGGERS
	B_INCR_TRIGGER	: R_TRIG;
	B_DECR_TRIGGER	: R_TRIG;
	
	//TO SHOW THE GREEN COLOUR ON THE TFT SCREEN WHEN IT'S ACTIVE
	STATE_WASHING_BUTTON	: INT;
	STATE_HEATING_BUTTON	: INT;
	STATE_SPEED_BUTTON		: INT;	
	
	STATE_WASH_FWD			: INT;
	STATE_WASH_AFT			: INT;
	STATE_HEAT_FWD			: INT;
	STATE_HEAT_AFT			: INT;
	STATE_INT_ACTIVE		: INT;
	STATE_SPEED_FWD			: INT;
	STATE_SPEED_AFT			: INT;
	STATE_GROUP_FWD			: INT;
	STATE_GROUP_AFT			: INT;
	STATE_INTERVAL_ACTIVE	: INT;
	
	STATE_WIPER_FWD_PS	: INT;
	STATE_WIPER_FWD_C	: INT;
	STATE_WIPER_FWD_SB	: INT;
	STATE_WIPER_SIDE_PS	: INT;
	STATE_WIPER_SIDE_SB	: INT;
	STATE_WIPER_AFT_PS	: INT;
	STATE_WIPER_AFT_C	: INT;
	STATE_WIPER_AFT_SB	: INT;
	STATE_WIPER_AFT_BOT	: INT;
	
	ANY_WIPER_ACTIVE: INT;
	ANY_FWD_WIPER_ACTIVE : INT;
	ANY_AFT_WIPER_ACTIVE : INT; 
	
	TIMER	: TP;
 END_VAR

_B_WIPER_FWD_PS	(CLK:= B_WIPER_FWD_PS );
_B_WIPER_FWD_C	(CLK:= B_WIPER_FWD_C );
_B_WIPER_FWD_SB	(CLK:= B_WIPER_FWD_SB );
_B_WIPER_SIDE_PS(CLK:= B_WIPER_SIDE_PS );
_B_WIPER_SIDE_SB(CLK:= B_WIPER_SIDE_SB );
_B_WIPER_AFT_PS	(CLK:= B_WIPER_AFT_PS );
_B_WIPER_AFT_C	(CLK:= B_WIPER_AFT_C );
_B_WIPER_AFT_SB	(CLK:= B_WIPER_AFT_SB );
_B_WIPER_AFT_BOT(CLK:= B_WIPER_AFT_BOT );
	
B_INCR_TRIGGER(CLK:= B_VALUE_INCR);
B_DECR_TRIGGER(CLK:= B_VALUE_DECR);

IF  PAGE	= PG_NR_MAIN_TOGGLE THEN
	B_DIMMING_INCR_TRIGGER(CLK:= B2);
	B_DIMMING_DECR_TRIGGER(CLK:= B3);
END_IF

  DIM_INS             := (DIM_INS OR (OLD_DIM_PANEL_LEVEL <> PANEL_DIMMING_LEVEL)) AND NOT (PANEL_DIMMING_LEVEL = FINT#0) AND NOT B_DIMMING_INCR_TRIGGER.Q AND NOT B_DIMMING_DECR_TRIGGER.Q;
  DIM_PANEL           := NOT DIM_INS;
  OLD_DIM_PANEL_LEVEL := PANEL_DIMMING_LEVEL;
 
//PANEL DIMMING
IF  PAGE	= PG_NR_MAIN_TOGGLE THEN
	IF B_DIMMING_DECR_TRIGGER.Q THEN
		IF DIMMING > 95 THEN
            DIMMING_STEP := 1;
           
        ELSIF DIMMING > 90 THEN
            DIMMING_STEP := 5;
        ELSE
            DIMMING_STEP := 10;
        END_IF 
        
		DIMMING := TFT_DIMMING - DIMMING_STEP;
	END_IF 
	
	IF B_DIMMING_INCR_TRIGGER.Q THEN
		IF DIMMING >= 95 THEN
            DIMMING_STEP := 1;
               
        ELSIF DIMMING >= 90 THEN
            DIMMING_STEP := 5;
        ELSE
            DIMMING_STEP := 10;
        END_IF
		
		DIMMING := TFT_DIMMING + DIMMING_STEP;
		
	END_IF
	
	IF DIMMING > MAX_DIMMING THEN
		DIMMING := MAX_DIMMING;
	END_IF	
END_IF

IF DIM_INS THEN DIMVAL := PANEL_DIMMING_LEVEL; ELSE DIMVAL := DIMMING; END_IF 

TFT_DIMMING := DIMVAL;
 
//SET A COMMAND WHEN A BUTTON IS PRESSED
IF MIMIC_CONTROL THEN
	IF CMD_MIMIC>0 (*AND CMD_MIMICo=0 *)THEN
		CMD := CMD_MIMIC;
		//CMD_MIMICo 	:= CMD_MIMIC;
		T:=T+1;
	END_IF
ELSE 
	IF _B_WIPER_FWD_PS.Q THEN
		CMD := 1;
	ELSIF _B_WIPER_FWD_C.Q THEN
		CMD := 2;
	ELSIF _B_WIPER_FWD_SB.Q THEN
		CMD := 3;
	ELSIF _B_WIPER_SIDE_PS.Q THEN
		CMD := 4;
	ELSIF _B_WIPER_SIDE_SB.Q THEN
		CMD := 5;
	ELSIF _B_WIPER_AFT_PS.Q THEN
		CMD := 6;
	ELSIF _B_WIPER_AFT_C.Q THEN
		CMD := 7;
	ELSIF _B_WIPER_AFT_SB.Q THEN
		CMD := 8;
	ELSIF _B_WIPER_AFT_BOT.Q THEN
		CMD := 9;
	ELSIF B_GROUP_FWD THEN
		CMD := 11;
	ELSIF B_GROUP_AFT THEN
		CMD := 12;
	ELSIF B_SPEED_FWD THEN
		CMD := 13;
	ELSIF B_SPEED_AFT THEN
		CMD := 14;
	ELSIF B_HEAT_FWD THEN
		CMD := 15;
	ELSIF B_HEAT_AFT THEN
		CMD := 16;
	ELSIF B_WASH_FWD THEN
		CMD := 17;
	ELSIF B_WASH_AFT THEN
		CMD := 18;
	ELSIF B_STOP_ALL THEN
		CMD := 19;
	ELSIF B_INTERVAL_ACTIVE THEN
		CMD := 20;
	END_IF
END_IF

//SET THE STATES/BACK'LIGHT' OF THE BUTTONS ON THE TFT
	//GROUP BUTTONS
FRONT_WIPERS_ON_MIMIC 	:= FWD_GROUP_ON;
STATE_GROUP_FWD			:= BOOL_TO_INT(FWD_GROUP_ON);

STATE_WIPER_FWD_PS	:= BOOL_TO_INT(PS_FORE_HS_OUT OR PS_FORE_LS_OUT OR FWD_GROUP_ON);
STATE_WIPER_FWD_C	:= BOOL_TO_INT(C_FORE_HS_OUT OR C_FORE_LS_OUT OR FWD_GROUP_ON);
STATE_WIPER_FWD_SB	:= BOOL_TO_INT(SB_FORE_HS_OUT OR SB_FORE_LS_OUT OR FWD_GROUP_ON);
STATE_WIPER_SIDE_PS	:= BOOL_TO_INT(PS_SIDE_HS_OUT OR PS_SIDE_LS_OUT OR FWD_GROUP_ON);
STATE_WIPER_SIDE_SB	:= BOOL_TO_INT(SB_SIDE_HS_OUT OR SB_SIDE_LS_OUT OR FWD_GROUP_ON);


AFT_WIPERS_ON_MIMIC := AFT_GROUP_ON;
STATE_GROUP_AFT		:= BOOL_TO_INT(AFT_GROUP_ON);

STATE_WIPER_AFT_PS	:= BOOL_TO_INT(PS_AFT_HS_OUT OR PS_AFT_LS_OUT OR AFT_GROUP_ON);
STATE_WIPER_AFT_C	:= BOOL_TO_INT(C_AFT_HS_OUT OR C_AFT_LS_OUT OR AFT_GROUP_ON);
STATE_WIPER_AFT_SB	:= BOOL_TO_INT(SB_AFT_HS_OUT OR SB_AFT_LS_OUT OR AFT_GROUP_ON);
STATE_WIPER_AFT_BOT	:= BOOL_TO_INT(B_AFT_HS_OUT OR B_AFT_LS_OUT OR AFT_GROUP_ON);


	//FEATURE BUTTONS
STATE_HEAT_FWD 		 := BOOL_TO_INT(HEAT_FORE_OUT);
STATE_HEAT_AFT 		 := BOOL_TO_INT(HEAT_AFT_OUT);
STATE_HEATING_BUTTON := BOOL_TO_INT(HEAT_FORE_OUT OR HEAT_AFT_OUT);
STATE_HEAT_FWD_MIMIC := HEAT_FORE_OUT;
STATE_HEAT_AFT_MIMIC := HEAT_AFT_OUT;

STATE_INT_ACTIVE	  := BOOL_TO_INT(INTERVAL_ACTIVE);
INTERVAL_ACTIVE_MIMIC := INTERVAL_ACTIVE;

STATE_SPEED_FWD 		:= BOOL_TO_INT(FWD_HS_ON);
STATE_SPEED_AFT 		:= BOOL_TO_INT(AFT_HS_ON);
STATE_SPEED_BUTTON 		:= BOOL_TO_INT(FWD_HS_ON OR AFT_HS_ON);
STATE_SPEED_FWD_MIMIC 	:= FWD_HS_ON;
STATE_SPEED_AFT_MIMIC 	:= AFT_HS_ON;

ANY_WIPER_ACTIVE := BOOL_TO_INT(FALSE);
FOR I := 1 TO 9 BY 1 DO
	IF WIPER_COMMAND[I] THEN
		ANY_WIPER_ACTIVE := BOOL_TO_INT(WIPER_COMMAND[I]);
END_IF
END_FOR

FOR I := 1 TO 5 BY 1 DO
	IF NOT FWD_GROUP_ON AND WIPER_COMMAND[I] THEN
		STATE_GROUP_FWD := 2 * BOOL_TO_INT(WIPER_COMMAND[I]);
END_IF
END_FOR

FOR I := 6 TO 9 BY 1 DO
	IF NOT AFT_GROUP_ON AND WIPER_COMMAND[I] THEN
		STATE_GROUP_AFT := 2 * BOOL_TO_INT(WIPER_COMMAND[I]);
	END_IF 	
END_FOR

	CMD_MIMICo := 0;

END_PROGRAM]]><EDITOR><![CDATA[]]></EDITOR></ITEM>
      <ITEM lang="ST" disabled="0" type="PRG" name="VAR__GLOBAL" editor="PAL1131.ST"><![CDATA[PROGRAM VAR__GLOBAL
 VAR_EXTERNAL (*$AUTO*) END_VAR
 
 VAR_GLOBAL

 
   // ANY XP
   START_UP             : BOOL ;
   POWER_ON             : BOOL ;
   POWER_UP             : BOOL ;
   LOOP_MSEC            : FINT ;
   SCHEDULER            : INT ;
   
   // TFT    
   FLASH                : BOOL ;
   FLASH_S              : BOOL ;
   FLASH_F              : BOOL ; 
   FLASH_M              : BOOL ; 
   BUZZER_F             : BOOL ;
   ANY_ALARM            : BOOL ;
   UNACC_ALARM          : BOOL ;
   ALM_EMERGENCY        : BOOL ;
   ALM_ALARM            : BOOL ;
   ALM_WARNING          : BOOL ;
   ALM_CAUTION          : BOOL ;     
   DIMMING              : FINT ;  
   PAGE_IN_MENU         : BOOL := FALSE ; 
   ALM_GROUP_1          : BOOL := TRUE ;
   
   STATE_ALARM          : INT ; 
   ALARM_BUZZER         : BOOL := FALSE ; 
 
	CMD					: INT;
 END_VAR

  // RESET EVERY CYCLE
 ALARM_BUZZER     := FALSE ;

END_PROGRAM]]><EDITOR><![CDATA[]]></EDITOR></ITEM>
      <ITEM lang="ST" disabled="0" type="PRG" name="SYSTEM" editor="PAL1131.ST"><![CDATA[PROGRAM SYSTEM
 VAR_EXTERNAL (*$AUTO*) END_VAR
 
 VAR
 
   _START_UP            : R_TRIG ;
   _POWER_UP            : R_TRIG ;
   _POWER_ON            : TON ;         

   GET_IP               : HW_XP;
   TLOOP                : HW_TIMING  ;
   
   IFLASH               : INT ; 
   IRETURN              : INT ;
   TFT_REFRESH          : BOOL;    
   FL_CNT               : INT; 
   
   _FLASH               : R_TRIG ;
   SET_TFT_FLASH        : HW_SET_TFT_FLASH ;
   GET_TFT_FLASH        : HW_GET_TFT_FLASH ;   
   
   // CONFIGURE ALARM GROUP ON TFT FOR BUZZER TRIGGER
   GET_TFT_ALARM_PULSE  : HW_GET_ALARM_PULSE_ON_NEXT_V02;
   GET_TFT_UNACCEPT     : HW_GET_UNACCEPT_ALM ;
    

 END_VAR
 
//_____________SYSTEM INITIALIZATIONS COMMON FOR PCS PROJECT XP's__________________
 

// XP START INITIALIZATIONS
_START_UP(CLK:= TRUE ,            Q => START_UP );      // START-UP => 1-SCAN PULSE    _|_______
_POWER_ON(IN:= TRUE , PT:= T#5s , Q => POWER_ON );      // POWER-ON => CONTINUOUS      ______|^^^^^^^^^
_POWER_UP(CLK:= POWER_ON ,        Q => POWER_UP );      // POWER-UP => 1-SCAN PULSE    ______|__________

// TIMING
TLOOP();  
LOOP_MSEC := INT_TO_FINT(TLOOP.TIME_BETWEEN_CYCLES) ;   // MSEC PREVIOUS LOOP  

// COUNTER 0..4; USE FOR DISTRIBUTING LOADS FOR LOWER PRIORITY PROCESSES
SCHEDULER := (SCHEDULER + 1) MOD 5;                                           // PROCESSOR COUNTER 0.5 SEC CYCLE   

// GRAPHIC FLASHERS
GET_TFT_FLASH();                     // DEFAULT FLASHER SYNCED WITH TFT REFRESH
IFLASH := GET_TFT_FLASH.IRET;
IF IFLASH = 0 THEN   FLASH := FALSE;  ELSE  FLASH := TRUE; END_IF
_FLASH(CLK:= FLASH) ;
TFT_REFRESH := _FLASH.Q ;  
                                        
SET_TFT_FLASH(IINPUT:=BOOL_TO_INT(FLASH));        // SET ALARM PAGE_FLASH RATE TFT

IF FL_CNT>=3   THEN                // DIVIDE COUNTER
  FL_CNT := 0 ;
ELSIF TFT_REFRESH THEN         
  FL_CNT := FL_CNT + 1 ;
END_IF
// FLASH                     //  SYNCHRONISED WITH TFT REFRESH RATE
FLASH_S     := FL_CNT=0 ;    //  1-0-0-0-1-0-0-0            // SLOW
FLASH_F     := FL_CNT<3 ;    //  1-1-1-0-1-1-1-0            // FAST
FLASH_M     := FL_CNT<2 ;    //  1-1-0-0-1-1-0-0            // MEDIUM 


//ANY_ALARM   => BUZZER TRIGGER
GET_TFT_ALARM_PULSE(IINPUT:=0, IRET=>IRETURN);                              
IF IRETURN =1 THEN ANY_ALARM:= TRUE ; ELSE ANY_ALARM:= FALSE ; END_IF
  
//UNACC_ALARM
GET_TFT_UNACCEPT(IRET=>IRETURN);
IF IRETURN = 1 THEN UNACC_ALARM := TRUE; ELSE UNACC_ALARM := FALSE; END_IF

  
// ALARM CLASSIFICATIONS  
CASE SCHEDULER OF
  1:   GET_TFT_ALARM_PULSE(IINPUT:=1, IRET=>IRETURN);                         // ANY ALARM CLASS: EMERGENCY
       IF IRETURN>0 THEN  ALM_EMERGENCY:= TRUE ;ELSE ALM_EMERGENCY:= FALSE ;  END_IF
  2:   GET_TFT_ALARM_PULSE(IINPUT:=2, IRET=>IRETURN);                         // ANY ALARM CLASS: ALARM
       IF IRETURN>0 THEN ALM_ALARM:= TRUE ;     ELSE ALM_ALARM:= FALSE     ; END_IF
  3:   GET_TFT_ALARM_PULSE(IINPUT:=3, IRET=>IRETURN);                         // ANY ALARM CLASS: WARNING
       IF IRETURN>0 THEN ALM_WARNING:= TRUE ;   ELSE ALM_WARNING:= FALSE   ; END_IF
  4:   GET_TFT_ALARM_PULSE(IINPUT:=4, IRET=>IRETURN);                         // ANY ALARM CLASS: CAUTION
       IF IRETURN>0 THEN ALM_CAUTION:= TRUE ;   ELSE ALM_CAUTION:= FALSE   ; END_IF
END_CASE   
  
// PANEL "STATE_ALARM" : 5= CLASS EMCY, 6= CLASS ALM, 7= CLASS WARNING, 8= CLASS CAUTION  

IF  ALM_EMERGENCY  THEN STATE_ALARM := 5 ;
ELSIF  ALM_ALARM   THEN STATE_ALARM := 6 ;
ELSIF  ALM_WARNING THEN STATE_ALARM := 7 ;
ELSIF  ALM_CAUTION THEN STATE_ALARM := 8 ;
ELSE                    STATE_ALARM := 0 ;
END_IF 

END_PROGRAM]]><EDITOR><![CDATA[]]></EDITOR></ITEM>
      <ITEM lang="ST" disabled="0" type="PRG" name="PAGE_NAVIGATION" editor="PAL1131.ST"><![CDATA[PROGRAM PAGE_NAVIGATION
 VAR_EXTERNAL (*$AUTO*) END_VAR
 
 VAR_GLOBAL
 
   PAGE                 : INT ;
   TO_HOME              : BOOL ;
 
    // SEE PAGE NUMBERS PAL1131G 
   HOME_PAGE            : INT := 0 ;
   PG_NR_SUB            : INT := 1 ;
   PG_NR_WCS_FWD        : INT := 2 ;
   PG_NR_WCS_AFT        : INT := 3 ;
   PG_NR_ALARM          : INT := 4 ;
   PG_NR_WCS_MAIN1      : INT := 6 ;
   PG_NR_WCS_MAIN2      : INT := 7 ;
   PG_NR_WCS_MAIN3      : INT := 8 ;
   PG_NR_WCS_MAIN4      : INT := 9 ;
   PG_NR_MAIN_TOGGLE    : INT := 10 ;
   PG_NR_MENU           : INT := 11 ;
   
   // PBT = PB TOUCH , PBH = PB HARDWARE, PBI = PB IND
   PBT_DUMMY            : BOOL ;
   PBT_WCS_FWD          : BOOL ;  
   PBT_WCS_AFT          : BOOL ; 
   PBT_HOME_PG          : BOOL ; 
   PBT_MENU_PG          : BOOL ;    PBI_MENU_PG  : INT ;   // 0=HIDE, 1=SETUP
   PBT_SCROLL_UP        : BOOL ;  
   PBT_SCROLL_DN        : BOOL ;   
   PBT_ALARM_PG         : BOOL ;    PBI_ALARM_PG : INT ;   // 0=ALM OFF, 1=ALM_ON  
   PBT_ACCEPT           : BOOL ;    PBI_ACCEPT   : INT ;   // 0=ALM OFF, 1=ALM_ON    
   
 

 END_VAR
 
 VAR
 
   PAGE_NR               : INT ;
   GET_TFT_PAGE          : HW_GET_TFT_PAGE;
   SET_TFT_PAGE          : HW_SET_TFT_PAGE;  

   _PBT_ALARM_PG         : R_TRIG ;   
   _PBT_WCS_FWD          : R_TRIG ; 
   _PBT_WCS_AFT          : R_TRIG ; 
   _PBT_HOME_PG          : R_TRIG ; 
   _PBT_MENU_PG          : R_TRIG ;  
   
   _PBT_B_WASHING        : R_TRIG ; 
   _PBT_B_HEAT           : R_TRIG ;
   _PBT_B_INTERVAL       : R_TRIG ;
   _PBT_B_SPEED          : R_TRIG ;
 
 
 END_VAR 

  //___________________PAGE SELECTIONS ___________________________________________________ 
  
GET_TFT_PAGE();
PAGE    := GET_TFT_PAGE.IRET;
PAGE_NR := PAGE ; 

_PBT_ALARM_PG(CLK:= PBT_ALARM_PG );
_PBT_WCS_FWD(CLK:= PBT_WCS_FWD );
_PBT_WCS_AFT(CLK:= PBT_WCS_AFT );
_PBT_HOME_PG(CLK:= PBT_HOME_PG );
_PBT_MENU_PG(CLK:=PBT_MENU_PG );
  
  
// PAGE SELECTIONS 
IF _PBT_ALARM_PG.Q AND PBI_ALARM_PG<>1 THEN
  PAGE := PG_NR_ALARM ;
ELSIF _PBT_WCS_FWD.Q THEN
  PAGE := PG_NR_WCS_FWD ;
ELSIF _PBT_WCS_AFT.Q THEN
  PAGE := PG_NR_WCS_AFT ;  
ELSIF _PBT_HOME_PG.Q OR TO_HOME THEN
  IF PAGE <> HOME_PAGE THEN
    PAGE := HOME_PAGE ;
  ELSE
    PAGE := PG_NR_MAIN_TOGGLE ; 
  END_IF
ELSIF _PBT_MENU_PG.Q THEN
  PAGE := PG_NR_MENU ;
END_IF


_PBT_B_WASHING(CLK:=B_WASHING );
_PBT_B_HEAT(CLK:=B_HEAT );
_PBT_B_INTERVAL(CLK:=B_INTERVAL );
_PBT_B_SPEED(CLK:=B_SPEED );

//POP-UP MENU IN HOME SCREEN
IF _PBT_B_WASHING.Q THEN	
	PAGE := PG_NR_WCS_MAIN1 ;
ELSIF _PBT_B_HEAT.Q THEN	
	PAGE := PG_NR_WCS_MAIN2 ;
ELSIF _PBT_B_INTERVAL.Q AND PAGE = PG_NR_WCS_MAIN3 THEN
	PAGE := HOME_PAGE ;
ELSIF _PBT_B_INTERVAL.Q THEN
	PAGE := PG_NR_WCS_MAIN3 ;
ELSIF _PBT_B_SPEED.Q THEN
	PAGE := PG_NR_WCS_MAIN4 ;
END_IF



IF PAGE_NR <> PAGE AND NOT PAGE_IN_MENU THEN                                  // UPDATE PAGE
  PAGE_NR := PAGE;
  SET_TFT_PAGE(IINPUT:=PAGE);
END_IF 


// ALARM PAGE / STOP HORN SWAP
IF PBI_BUZZER=1 THEN  // BUZZER ACTIVE
  PBI_ALARM_PG := 1 ;
ELSIF UNACC_ALARM THEN 
  IF FLASH THEN PBI_ALARM_PG := 2 ; ELSE PBI_ALARM_PG := 0 ; END_IF           // FLASH
ELSIF ANY_ALARM THEN  
  PBI_ALARM_PG := 2 ;
ELSE
  PBI_ALARM_PG := 0 ;             
END_IF


// MENU BUTTON
PBI_MENU_PG := 1 ;


END_PROGRAM]]><EDITOR><![CDATA[]]></EDITOR></ITEM>
      <ITEM lang="ST" disabled="0" type="PRG" name="PG_ALARM" editor="PAL1131.ST"><![CDATA[PROGRAM PG_ALARM
 VAR_EXTERNAL (*$AUTO*) END_VAR


 VAR
   PB_ACC               : R_TRIG ;
   PB_UP                : R_TRIG ;   
   PB_DN                : R_TRIG ;   
   ACCEPT               : HW_ACCEPT ;
   UP                   : HW_SCROLL_UP ;
   DN                   : HW_SCROLL_DOWN ;      
   
 END_VAR

  // ALARM PAGE SELECTED ___________________________________________________________

  IF PAGE=PG_NR_ALARM THEN  

  // PB ACCEPT EDGE
    
    PB_ACC(CLK:= PBT_ACCEPT) ;
   
    IF PB_ACC.Q THEN ACCEPT() ;  END_IF                                         // ACCEPT ALARMS
    
    // ACCEPT BUTTON SWAP
    
    IF  UNACC_ALARM THEN 
      PBI_ACCEPT := 1 ;
    ELSE
      PBI_ACCEPT := 0 ;             
    END_IF

  
    // SCROLL LIST
    PB_UP (CLK:= PBT_SCROLL_UP) ;
    PB_DN (CLK:= PBT_SCROLL_DN) ;
    IF PB_UP.Q  THEN UP()     ;  END_IF                                           // SCROLL UP
    IF PB_DN.Q  THEN DN()     ;  END_IF                                           // SCROLL DOWN

   
  END_IF
   

END_PROGRAM]]><EDITOR><![CDATA[]]></EDITOR></ITEM>
      <ITEM lang="ST" disabled="0" type="PRG" name="PG_MENU" editor="PAL1131.ST"><![CDATA[PROGRAM PG_MENU
 VAR_EXTERNAL (*$AUTO*) END_VAR
 
 VAR_GLOBAL
 
  // TOUCH BUTTONS - NUM KEYBOARD
  TB_0                 : BOOL ;
  TB_1                 : BOOL ;
  TB_2                 : BOOL ;
  TB_3                 : BOOL ;
  TB_4                 : BOOL ;
  TB_5                 : BOOL ;
  TB_6                 : BOOL ;
  TB_7                 : BOOL ;
  TB_8                 : BOOL ;
  TB_9                 : BOOL ;
  TB_DOT               : BOOL ;
  TB_DEL               : BOOL ;
  TB_MIN               : BOOL ;

  
  // HW PUSH BUTTONS
  PB1                   : BOOL := FALSE ;
  PB2                   : BOOL := FALSE ;
  PB3                   : BOOL := FALSE ;
  PB4                   : BOOL := FALSE ;
  PB5                   : BOOL := FALSE ;
  PB6                   : BOOL := FALSE ;
 
 END_VAR
 VAR

   // HW PUSH BUTTONS
  _PB1                  : R_TRIG ;
  _PB2                  : R_TRIG ;  
  _PB3                  : R_TRIG ;  
  _PB4                  : R_TRIG ;  
  _PB5                  : R_TRIG ;
  _PB6                  : R_TRIG ;

  PB_PWCHANGE           : BOOL := FALSE;
  PBMENU_UP             : BOOL := FALSE;
  PBMENU_DOWN           : BOOL := FALSE;
  PBMENU_EXIT           : BOOL := FALSE;
  PBMENU_ACCEPT         : BOOL := FALSE; 

  TBMODE                : INT ;
              
  BUT_ID                : HW_BUTTON_ID;
  SET_TB_PRESS          : HW_MENU_TOUCH_BUTTON_PRESS; 
  TBTRIGGER             : R_TRIG ;

  SET_MENU_FIRST        : HW_MENU_FIRST_PAGE;
  SET_PUBLIC_KEY        : HW_MENU_PUBLIC_KEY;
  SET_MENU_PW_CHANGE    : HW_MENU_PW_CHANGE;
  SET_MENU_TOUCH        : HW_MENU_TOUCH_FUNCTION;

 END_VAR
 
 
  // INIT
  
  IF START_UP THEN

    SET_MENU_FIRST(IINPUT:=PG_NR_MENU); 
    SET_PUBLIC_KEY(IINPUT:=0);       
    SET_MENU_PW_CHANGE(IINPUT:=1);
    SET_MENU_TOUCH(USE_TB_LOGIN :=TRUE, USE_TB_CHANGE_PWD:=TRUE, USE_TB_EDIT:=TRUE); 

  END_IF

  TBMODE := -1;  
  
  
  // MENU PAGES ___________________________________________________________________
  
  PAGE_IN_MENU := PAGE >= PG_NR_MENU AND PAGE <= PG_NR_MENU+3 ;
  
  IF PAGE_IN_MENU THEN               
     
      
    // BUTTON EDGES 
    _PB1(CLK:= PB1 );
    _PB2(CLK:= PB2 , Q=> PB_PWCHANGE );
    _PB3(CLK:= PB3 , Q=> PBMENU_DOWN );   
    _PB4(CLK:= PB4 , Q=> PBMENU_UP );
    _PB5(CLK:= PB5 , Q=> PBMENU_ACCEPT );
    _PB5(CLK:= PB6 , Q=> PBMENU_EXIT ); 
    
    // MENU NAVIGATION
    IF    PB_PWCHANGE    THEN BUT_ID(IINPUT:=2);
    ELSIF PBMENU_DOWN    THEN BUT_ID(IINPUT:=3);
    ELSIF PBMENU_UP      THEN BUT_ID(IINPUT:=4);
    ELSIF PBMENU_ACCEPT  THEN BUT_ID(IINPUT:=5);    
    ELSIF PBMENU_EXIT    THEN BUT_ID(IINPUT:=6);
    END_IF
    
    // NUMERIC KEYPAD
    IF    TB_0 THEN   TBMODE := 0;
    ELSIF TB_1 THEN   TBMODE := 1;
    ELSIF TB_2 THEN   TBMODE := 2;
    ELSIF TB_3 THEN   TBMODE := 3;
    ELSIF TB_4 THEN   TBMODE := 4;
    ELSIF TB_5 THEN   TBMODE := 5;
    ELSIF TB_6 THEN   TBMODE := 6;
    ELSIF TB_7 THEN   TBMODE := 7;
    ELSIF TB_8 THEN   TBMODE := 8;
    ELSIF TB_9 THEN   TBMODE := 9;
    ELSIF TB_DOT THEN TBMODE := 11;
    ELSIF TB_DEL THEN TBMODE := 12;
    ELSIF TB_MIN THEN TBMODE := 10;
    END_IF   
    
    TBTRIGGER(CLK:= (TBMODE > -1));
    IF TBTRIGGER.Q THEN
      SET_TB_PRESS(IINPUT:=TBMODE);   
    END_IF   


  END_IF   // PAGE


END_PROGRAM]]><EDITOR><![CDATA[]]></EDITOR></ITEM>
      <ITEM lang="ST" disabled="0" type="PRG" name="P02_MAIN" editor="PAL1131.ST"><![CDATA[PROGRAM P02_MAIN
 VAR_EXTERNAL (*$AUTO*) END_VAR

 VAR_GLOBAL
	WIPER_COMMAND 	: ARRAY[1..20] OF BOOL;
	
	FWD_GROUP_ON		: BOOL;
	AFT_GROUP_ON 		: BOOL;	
	
	FWD_HS_ON			: BOOL;
	AFT_HS_ON			: BOOL;
	
	FWD_HEATING_ON		: BOOL;
	AFT_HEATING_ON		: BOOL;
	
	FWD_WASH_ON			: BOOL;
	AFT_WASH_ON			: BOOL;
	
	INTERVAL_ACTIVE		: BOOL;
	INTERVAL_LENGTH		: FINT;
 END_VAR
 
 VAR		
	CMDo 	: INT;
	I		: INT := 0;

 	RESET 	: TON;
 	
 	INTERVAL_LENGTH_TIME : TIME;
 	INTERVAL_OFFSET_TIME : TIME;
	INTERVAL_TIMER1	: TON;
	INTERVAL_TIMER2	: TON;
	
	DELAY_TIMER 	: TON;
	DELAY_TRIGGER	: TP;
	
	//FUNCTION VARIABLES					
 	FWD_PS	: WIPER_CTRL;
 	FWD_C	: WIPER_CTRL;
 	FWD_SB	: WIPER_CTRL;
 	SIDE_PS	: WIPER_CTRL;
 	SIDE_SB	: WIPER_CTRL;
 	AFT_PS	: WIPER_CTRL;
 	AFT_C	: WIPER_CTRL;
 	AFT_B	: WIPER_CTRL;
 	AFT_SB	: WIPER_CTRL;
 	
 	WASH_FWD: WASH_PROGRAM;
 	WASH_AFT: WASH_PROGRAM;
	WASHING_TIMER_FWD	: TP;
	WASHING_TIMER_AFT	: TP;
 	
 	//TIMER VARIABLES FOR WASHING PROGRAM
 	WASH_TIMER_FWD		: TP;
 	WASH_TIMER_AFT		: TP;
 	TOTAL_PROGRAM_TIME 	: TIME;
 	
	SPRAY_TIME		: TIME;
	MAIN_WASH_TIME	: TIME;
	PURGE_TIME		: TIME;	
 END_VAR

//SET INTERVAL TIMING
INTERVAL_LENGTH_TIME := FINT_TO_TIME(INTERVAL_LENGTH);
INTERVAL_OFFSET_TIME := FINT_TO_TIME(INT_OFFSET_IN);

INTERVAL_TIMER1(IN := INTERVAL_ACTIVE AND NOT INTERVAL_TIMER2.Q, PT :=T#300ms);
INTERVAL_TIMER2(IN := INTERVAL_ACTIVE AND INTERVAL_TIMER1.Q, PT :=INTERVAL_OFFSET_TIME + INTERVAL_LENGTH_TIME);

//SET WASHING PROGRAM TIME
SPRAY_TIME		:= FINT_TO_TIME(SPRAY_TIME_IN);
MAIN_WASH_TIME	:= FINT_TO_TIME(WASH_TIME_IN);
PURGE_TIME		:= FINT_TO_TIME(PURGE_TIME_IN) ;	
 
TOTAL_PROGRAM_TIME := (SPRAY_TIME)+(MAIN_WASH_TIME)+(PURGE_TIME);

IF TOTAL_PROGRAM_TIME < T#3000 THEN
	NO_PROGRAM_TIMES_SET := TRUE;
ELSE 
	NO_PROGRAM_TIMES_SET := FALSE;
END_IF


//SET INTERVAL TIME
//IF SHOW_FRAME_1131G = 3 THEN  
IF PAGE = PG_NR_WCS_MAIN3 OR MIMIC_CONTROL THEN  // INTERVAL SETTING PAGE
	IF B_INCR_TRIGGER.Q OR INCR_INTERVAL_MIMIC THEN
		IF INTERVAL_LENGTH < 10 THEN
			INTERVAL_LENGTH := INTERVAL_LENGTH + 1;
			INTERVAL_LENGTH_MIMIC := INTERVAL_LENGTH;
	
		ELSIF INTERVAL_LENGTH >= 10 AND INTERVAL_LENGTH < 40 THEN
			INTERVAL_LENGTH := INTERVAL_LENGTH + 10;
			INTERVAL_LENGTH_MIMIC := INTERVAL_LENGTH;
		END_IF
	END_IF
	IF B_DECR_TRIGGER.Q OR DECR_INTERVAL_MIMIC THEN
		IF INTERVAL_LENGTH > 10 AND INTERVAL_LENGTH <= 40 THEN

			INTERVAL_LENGTH := INTERVAL_LENGTH - 10;
			INTERVAL_LENGTH_MIMIC := INTERVAL_LENGTH;
		
		ELSIF INTERVAL_LENGTH >= 1 THEN
			INTERVAL_LENGTH := INTERVAL_LENGTH - 1;
			INTERVAL_LENGTH_MIMIC := INTERVAL_LENGTH;
		END_IF
	END_IF
END_IF

TO_HOME := FALSE ;   // TO HOME PAGE

IF CMD>0 AND CMDo=0 THEN
	IF CMD < 11 THEN
	
		//START STOP WIPER WITH THE INDIVIDUAL BUTTONS
		WIPER_COMMAND[CMD] := NOT WIPER_COMMAND[CMD];	

	ELSIF CMD = 11 THEN

		FWD_GROUP_ON := NOT FWD_GROUP_ON;
		FOR I := 1 TO 5 BY 1 DO
			WIPER_COMMAND[I] := FWD_GROUP_ON;  	
		END_FOR

	ELSIF CMD = 12 THEN
	
		AFT_GROUP_ON := NOT AFT_GROUP_ON;
		FOR I := 6 TO 9 BY 1 DO
			WIPER_COMMAND[I] := AFT_GROUP_ON;  	
		END_FOR
		
	ELSIF CMD = 13 THEN
	
		FWD_HS_ON := NOT FWD_HS_ON;
	
	ELSIF CMD = 14 THEN
	
		AFT_HS_ON := NOT AFT_HS_ON;
	
	ELSIF CMD = 15 THEN
		
		HEAT_FORE_OUT := NOT HEAT_FORE_OUT;
		
	ELSIF CMD = 16 THEN
		
		HEAT_AFT_OUT := NOT HEAT_AFT_OUT;
	
	ELSIF CMD = 17 THEN
		
		FWD_WASH_ON := TRUE;
		
	ELSIF CMD = 18 THEN
	
		AFT_WASH_ON := TRUE;
	
	ELSIF CMD = 19 THEN
		
		FOR I := 1 TO 9 BY 1 DO
			WIPER_COMMAND[I] := FALSE;  	
		END_FOR
		
		ANY_WIPER_ACTIVE:= 0;
	
	ELSIF CMD = 20 THEN
		
		INTERVAL_ACTIVE := NOT INTERVAL_ACTIVE;
	
	END_IF

	CMDo := CMD;	
	CMD := 0;	
END_IF	

//DELAY ON TFT AFTER SELECTING A FUNCTION
IF (PAGE <> PG_NR_WCS_FWD AND PAGE <> PG_NR_WCS_AFT) THEN
	DELAY_TRIGGER(IN:= (CMD<>CMDo AND CMD>12), PT:= 500);
	DELAY_TIMER(IN:= DELAY_TRIGGER.Q, PT:= 500);

	IF DELAY_TIMER.Q THEN
		TO_HOME := DELAY_TIMER.Q ;
	END_IF
END_IF
//SET RESP. GROUPS ON WHEN ALL WIPERS OF THAT GROUP ARE TURNED ON INDIVIDUALLY 
FWD_GROUP_ON := TRUE;
FOR I := 1 TO 5 BY 1 DO
	IF NOT WIPER_COMMAND[I] THEN
	 	FWD_GROUP_ON := FALSE;
	END_IF 
END_FOR	

AFT_GROUP_ON := TRUE;
FOR I := 6 TO 9 BY 1 DO
	IF NOT WIPER_COMMAND[I] THEN
	 	AFT_GROUP_ON := FALSE;
	END_IF 
END_FOR	


//WASHING PROGRAM FORE

WASHING_TIMER_FWD(IN:=B_WASH_FWD, PT := TOTAL_PROGRAM_TIME + T#1000);
WASHING_TIMER_AFT(IN:=B_WASH_AFT, PT := TOTAL_PROGRAM_TIME + T#1000);

IF WASHING_TIMER_FWD.Q THEN		
	WASH_FWD
		(
		TIMER_Q			:= WASHING_TIMER_FWD.Q, 
		TIMER_ET		:= WASHING_TIMER_FWD.ET,
		SPRAY_TIME		:= SPRAY_TIME,
		MAIN_WASH_TIME	:= MAIN_WASH_TIME,
		PURGE_TIME		:= PURGE_TIME,
		WASH			=> SPRAY_FORE_OUT,
		PURGE 			=> PURGE_FORE_OUT,
		WW_FWD_PS		=> PS_FORE_LS_OUT,
		WW_FWD_C		=> C_FORE_LS_OUT,
		WW_FWD_SB		=> SB_FORE_LS_OUT,
		WW_SIDE_PS		=> PS_SIDE_LS_OUT,
		WW_SIDE_SB		=> SB_SIDE_LS_OUT
		);
		
	STATE_WASH_FWD 			:= 1;
	STATE_WASHING_BUTTON 	:= 1;
	STATE_WASH_FWD_MIMIC 	:= TRUE;
ELSE
	STATE_WASH_FWD 			:= 0;
	STATE_WASHING_BUTTON 	:= 0;
	STATE_WASH_FWD_MIMIC 	:= FALSE;
END_IF
	
//WASHING PROGRAM AFT
IF WASHING_TIMER_AFT.Q THEN
	WASH_AFT
		(
		TIMER_Q			:= WASHING_TIMER_AFT.Q, 
		TIMER_ET		:= WASHING_TIMER_AFT.ET,
		SPRAY_TIME		:= SPRAY_TIME,
		MAIN_WASH_TIME	:= MAIN_WASH_TIME,
		PURGE_TIME		:= PURGE_TIME,
		WASH			=> SPRAY_AFT_OUT,
		PURGE 			=> PURGE_AFT_OUT,
		WW_AFT_PS		=> PS_AFT_LS_OUT,
		WW_AFT_C		=> C_AFT_LS_OUT,
		WW_AFT_B		=> B_AFT_LS_OUT,
		WW_AFT_SB		=> SB_AFT_LS_OUT
		);
		
	STATE_WASH_AFT 			:= 1;
	STATE_WASHING_BUTTON 	:= 1;
	STATE_WASH_AFT_MIMIC 	:= TRUE;
ELSE
	STATE_WASH_AFT 			:= 0;
	STATE_WASHING_BUTTON 	:= 0;
	STATE_WASH_AFT_MIMIC 	:= FALSE;
END_IF

//WIPER CONTROL	
IF NOT WASHING_TIMER_FWD.Q THEN
	FWD_PS
		(
		WIPER 			:= WIPER_COMMAND[1],
		WIPER_NUMBER	:= INT#1,
		FWD_HS_ON 		:= FWD_HS_ON,
		AFT_HS_ON 		:= FALSE,
		INTERVAL_ACTIVE := INTERVAL_ACTIVE,
		TIMER_OUTPUT	:= INTERVAL_TIMER1.Q,
		WIPER_HS 		=> PS_FORE_HS_OUT,
		WIPER_LS 		=> PS_FORE_LS_OUT
		);	


	FWD_C
		(
		WIPER 			:= WIPER_COMMAND[2],
		WIPER_NUMBER	:= INT#2,
		FWD_HS_ON 		:= FWD_HS_ON,
		AFT_HS_ON 		:= FALSE,
		INTERVAL_ACTIVE := INTERVAL_ACTIVE,
		TIMER_OUTPUT	:= INTERVAL_TIMER1.Q,
		WIPER_HS 		=> C_FORE_HS_OUT,
		WIPER_LS 		=> C_FORE_LS_OUT
		);

	FWD_SB
		(
		WIPER 			:= WIPER_COMMAND[3],
		WIPER_NUMBER	:= INT#3,
		FWD_HS_ON 		:= FWD_HS_ON,
		AFT_HS_ON 		:= FALSE,
		INTERVAL_ACTIVE := INTERVAL_ACTIVE,
		TIMER_OUTPUT	:= INTERVAL_TIMER1.Q,
		WIPER_HS 		=> SB_FORE_HS_OUT,
		WIPER_LS 		=> SB_FORE_LS_OUT
		);	

	SIDE_PS
		(
		WIPER 			:= WIPER_COMMAND[4],
		WIPER_NUMBER	:= INT#4,
		FWD_HS_ON 		:= FWD_HS_ON,
		AFT_HS_ON 		:= FALSE,
		INTERVAL_ACTIVE := INTERVAL_ACTIVE,
		TIMER_OUTPUT	:= INTERVAL_TIMER1.Q,
		WIPER_HS 		=> PS_SIDE_HS_OUT,
		WIPER_LS 		=> PS_SIDE_LS_OUT
		);

	SIDE_SB
		(
		WIPER 			:= WIPER_COMMAND[5],
		WIPER_NUMBER	:= INT#5,
		FWD_HS_ON 		:= FWD_HS_ON,
		AFT_HS_ON 		:= FALSE,
		INTERVAL_ACTIVE := INTERVAL_ACTIVE,
		TIMER_OUTPUT	:= INTERVAL_TIMER1.Q,
		WIPER_HS 		=> SB_SIDE_HS_OUT,
		WIPER_LS 		=> SB_SIDE_LS_OUT
		);	
END_IF

IF NOT WASHING_TIMER_AFT.Q THEN
	AFT_PS
		(
		WIPER 			:= WIPER_COMMAND[6],
		WIPER_NUMBER	:= INT#6,
		FWD_HS_ON 		:= FALSE,
		AFT_HS_ON 		:= AFT_HS_ON,
		INTERVAL_ACTIVE := INTERVAL_ACTIVE,
		TIMER_OUTPUT	:= INTERVAL_TIMER1.Q,
		WIPER_HS 		=> PS_AFT_HS_OUT,
		WIPER_LS 		=> PS_AFT_LS_OUT
		);	

	AFT_C
		(
		WIPER 			:= WIPER_COMMAND[7],
		WIPER_NUMBER	:= INT#7,
		FWD_HS_ON 		:= FALSE,
		AFT_HS_ON 		:= AFT_HS_ON,
		INTERVAL_ACTIVE := INTERVAL_ACTIVE,
		TIMER_OUTPUT	:= INTERVAL_TIMER1.Q,
		WIPER_HS 		=> C_AFT_HS_OUT,
		WIPER_LS 		=> C_AFT_LS_OUT
		);
		
	AFT_SB
		(
		WIPER 			:= WIPER_COMMAND[8],
		WIPER_NUMBER	:= INT#8,
		FWD_HS_ON 		:= FALSE,
		AFT_HS_ON 		:= AFT_HS_ON,
		INTERVAL_ACTIVE := INTERVAL_ACTIVE,
		TIMER_OUTPUT	:= INTERVAL_TIMER1.Q,
		WIPER_HS 		=> SB_AFT_HS_OUT,
		WIPER_LS 		=> SB_AFT_LS_OUT
		);		

	AFT_B
		(
		WIPER 			:= WIPER_COMMAND[9],
		WIPER_NUMBER	:= INT#9,
		FWD_HS_ON 		:= FALSE,
		AFT_HS_ON 		:= AFT_HS_ON,
		INTERVAL_ACTIVE := INTERVAL_ACTIVE,
		TIMER_OUTPUT	:= INTERVAL_TIMER1.Q,
		WIPER_HS 		=> B_AFT_HS_OUT,
		WIPER_LS 		=> B_AFT_LS_OUT
		);	
END_IF 

CMDo := 0;

END_PROGRAM ]]><EDITOR><![CDATA[]]></EDITOR></ITEM>
      <ITEM lang="ST" disabled="0" type="PRG" name="AUDIBLE" editor="PAL1131.ST"><![CDATA[PROGRAM AUDIBLE
 VAR_EXTERNAL (*$AUTO*) END_VAR
 
 VAR_GLOBAL
 
   PBT_BUZZER           : BOOL ;    PBI_BUZZER   : INT ;   // 0=BUZ OFF, 1=BUZ_ON
   P_H2                 : F_TRIG;
   
 END_VAR
 
 VAR

  BUZZER_PULSE_TIMER1 : TON;
  BUZZER_PULSE_TIMER2 : TOF;

  SILENCE              : BOOL := TRUE ; 
  
  NEW_ALM              : R_TRIG ;
  ALM_HORN             : RS ;
  
  _PB_STOP             : R_TRIG ;
  STOP_BUZZER          : BOOL ;
  
 END_VAR
 
// HORN 2 OFF
P_H2(CLK:= WH_HORN2); 
  
// INIT
SILENCE   := DEV_TEST_MODE >0 OR NOT POWER_ON ;                               //  DISABLE BUZZER (iFAT)
STOP_BUZZER := FALSE ;
  
// STOP HORN BUTTON
_PB_STOP(CLK:= PBT_BUZZER OR (PBT_ALARM_PG AND PBI_ALARM_PG=1) OR P_H2.Q );
STOP_BUZZER := _PB_STOP.Q ;

// ALARM BUZZER
NEW_ALM(CLK:= ANY_ALARM ) ; 
ALM_HORN(S:= NEW_ALM.Q , R1:= STOP_BUZZER );  
ALARM_BUZZER := ALM_HORN.Q1 ;
  
// BUZZER SWAP
IF ALARM_BUZZER THEN
  PBI_BUZZER := 1 ;
ELSE
  PBI_BUZZER := 0 ;  
END_IF   

IF SILENCE THEN
  BUZZER := FALSE ;
ELSE
  BUZZER := FALSE ;  

  IF ALARM_BUZZER AND ALARM_TYPE = 1 THEN 
	BUZZER_PULSE_TIMER1(IN:= NOT BUZZER_PULSE_TIMER2.Q, PT:= 700);
	BUZZER_PULSE_TIMER2(IN:= BUZZER_PULSE_TIMER1.Q, PT:= 300);
	
	IF BUZZER_PULSE_TIMER2.Q THEN
		BUZZER := TRUE;
	END_IF
	                     // ALARM
  ELSIF ALARM_BUZZER THEN
  	BUZZER := TRUE;
  END_IF
END_IF

ALM_TEST_MODE := DEV_TEST_MODE >0 ;


END_PROGRAM]]><EDITOR><![CDATA[]]></EDITOR></ITEM>
      <ITEM lang="ST" disabled="0" type="FBLK" name="WIPER_CTRL" editor="PAL1131.ST"><![CDATA[FUNCTION_BLOCK WIPER_CTRL

VAR_INPUT 
	WIPER_NUMBER	: INT;
	WIPER 			: BOOL;
	
	FWD_HS_ON 		: BOOL;
	AFT_HS_ON		: BOOL;
	
	INTERVAL_ACTIVE	: BOOL;
	TIMER_OUTPUT	: BOOL;
	
END_VAR

VAR_OUTPUT
	WIPER_HS 	: BOOL;
	WIPER_LS	: BOOL;

END_VAR
IF WIPER THEN
	
	IF INTERVAL_ACTIVE AND WIPER_NUMBER < 6 AND NOT FWD_HS_ON THEN
	
		IF NOT TIMER_OUTPUT THEN
			WIPER_LS := TRUE;
		ELSE 
			WIPER_LS := FALSE;
		END_IF
	ELSIF INTERVAL_ACTIVE AND WIPER_NUMBER < 10 AND NOT AFT_HS_ON THEN
		
		IF NOT TIMER_OUTPUT THEN
			WIPER_LS := TRUE;
		ELSE 
			WIPER_LS := FALSE;
		END_IF

	ELSIF WIPER_NUMBER <  6 AND FWD_HS_ON THEN
		
		WIPER_LS := FALSE;
		WIPER_HS := TRUE;
		
	ELSIF WIPER_NUMBER < 10 AND AFT_HS_ON THEN
		
		WIPER_LS := FALSE;
		WIPER_HS := TRUE;
		
	ELSIF WIPER_NUMBER < 6 AND NOT FWD_HS_ON THEN
	
		WIPER_HS := FALSE;
		WIPER_LS := TRUE;
		
	ELSIF WIPER_NUMBER < 10 AND NOT AFT_HS_ON THEN
		WIPER_HS := FALSE;
		WIPER_LS := TRUE;

	END_IF
ELSE
	WIPER_HS := FALSE;
	WIPER_LS := FALSE;
END_IF

END_FUNCTION_BLOCK]]><EDITOR><![CDATA[]]></EDITOR></ITEM>
      <ITEM lang="ST" disabled="0" type="FBLK" name="WASH_PROGRAM" editor="PAL1131.ST"><![CDATA[FUNCTION_BLOCK WASH_PROGRAM

VAR_EXTERNAL
	SHOW_FRAME_1131G : INT;
END_VAR

VAR	
	ELAPSED_TIME: TIME;
	
	SPRAYING	: BOOL;
	WASHING		: BOOL;
	PURGING		: BOOL;
	
	T2 : INT;
END_VAR

VAR_INPUT
	TIMER_Q			: BOOL; 
	TIMER_ET		: TIME;
	SPRAY_TIME		: TIME;
	MAIN_WASH_TIME	: TIME;
	PURGE_TIME		: TIME;
END_VAR
VAR_OUTPUT
	WASH	: BOOL;
	PURGE 	: BOOL;
	
	WW_FWD_PS	: BOOL;
 	WW_FWD_C	: BOOL;
 	WW_FWD_SB	: BOOL;
 	WW_SIDE_PS	: BOOL;
 	WW_SIDE_SB	: BOOL;
 	WW_AFT_PS	: BOOL;
 	WW_AFT_C	: BOOL;
 	WW_AFT_B	: BOOL;
 	WW_AFT_SB	: BOOL;
END_VAR

ELAPSED_TIME := TIMER_ET;

IF TIMER_Q THEN

	IF ELAPSED_TIME < SPRAY_TIME THEN
		
		WASH 	:= TRUE;
		SPRAYING	:= TRUE;
		
	ELSIF (ELAPSED_TIME) < (MAIN_WASH_TIME+SPRAY_TIME) THEN

		SPRAYING	:= FALSE;
		
		WW_FWD_PS	:= TRUE;
		WW_FWD_C	:= TRUE;
		WW_FWD_SB	:= TRUE;
		WW_SIDE_PS	:= TRUE;
		WW_SIDE_SB	:= TRUE;
		WW_AFT_PS	:= TRUE;
		WW_AFT_C	:= TRUE;
		WW_AFT_B	:= TRUE;
		WW_AFT_SB	:= TRUE;
		
		WASHING		:= TRUE;
		
	ELSIF (ELAPSED_TIME ) < (PURGE_TIME + SPRAY_TIME + MAIN_WASH_TIME) THEN
		WASHING		:= FALSE;
		
		WASH := FALSE;
		
		PURGE := TRUE;
		
		PURGING		:= TRUE;
		

	ELSIF ELAPSED_TIME > (PURGE_TIME + SPRAY_TIME + MAIN_WASH_TIME) THEN
		PURGING		:= FALSE;
		
		PURGE := FALSE;
		
		WW_FWD_PS	:= FALSE;
		WW_FWD_C	:= FALSE;
		WW_FWD_SB	:= FALSE;
		WW_SIDE_PS	:= FALSE;
		WW_SIDE_SB	:= FALSE;
		WW_AFT_PS	:= FALSE;
		WW_AFT_C	:= FALSE;
		WW_AFT_B	:= FALSE;
		WW_AFT_SB	:= FALSE;
	END_IF
ELSE
END_IF 
	
END_FUNCTION_BLOCK]]><EDITOR><![CDATA[]]></EDITOR></ITEM>
    </POU>
    <GLOBAL>
      <ITEM type="VAR" name="TFT_DIMMING" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 TFT_DIMMING (*$COMMENT 37018 OUTPUT - DIMMING TFT BACKLIGHT*) : FINT;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="NO_PROGRAM_TIMES_SET" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 NO_PROGRAM_TIMES_SET (*$COMMENT 37022 NO PROGRAM TIME SET*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="ALM_TEST_MODE" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 ALM_TEST_MODE (*$COMMENT 37023 WCS - KEEP SILENT (FAT MODE)*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="BUZZER" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 BUZZER (*$COMMENT 37024 FRONT BUZZER*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="ALARM_TYPE" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 ALARM_TYPE (*$COMMENT 37025 ALARM TYPE PULSE*) : FINT;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="CMD_MIMIC" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 CMD_MIMIC (*$COMMENT 37027 CMD*) : INT;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="MIMIC_CONTROL" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 MIMIC_CONTROL (*$COMMENT 37028 CONTROL FROM MIMIC*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="INCR_INTERVAL_MIMIC" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 INCR_INTERVAL_MIMIC (*$COMMENT 37029 INCREASE INTERVAL TIME*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="DECR_INTERVAL_MIMIC" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 DECR_INTERVAL_MIMIC (*$COMMENT 37030 DECREASE INTERVAL TIME*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="FRONT_WIPERS_ON_MIMIC" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 FRONT_WIPERS_ON_MIMIC (*$COMMENT 37031 FRONT WIPERS ON*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="AFT_WIPERS_ON_MIMIC" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 AFT_WIPERS_ON_MIMIC (*$COMMENT 37032 AFT WIPERS ON*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="INTERVAL_ACTIVE_MIMIC" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 INTERVAL_ACTIVE_MIMIC (*$COMMENT 37033 INTERVAL ACTIVE*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="INTERVAL_TIME_MIMIC" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 INTERVAL_TIME_MIMIC (*$COMMENT 37034 INTERVAL TIME*) : FINT;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="DEV_TEST_MODE" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 DEV_TEST_MODE (*$COMMENT 37038 TEST MODE*) : INT;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="SPRAY_TIME_IN" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 SPRAY_TIME_IN (*$COMMENT 37041 SPRAY_TIME_IN*) : FINT;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="SPRAY_TIME_OUT" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 SPRAY_TIME_OUT (*$COMMENT 37042 SPRAY TIME*) : FINT;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="WASH_TIME_IN" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 WASH_TIME_IN (*$COMMENT 37043 WASH_TIME_IN*) : FINT;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="WASH_TIME_OUT" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 WASH_TIME_OUT (*$COMMENT 37044 WASH TIME*) : FINT;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="PURGE_TIME_IN" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 PURGE_TIME_IN (*$COMMENT 37045 PURGE_TIME_IN*) : FINT;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="PURGE_TIME_OUT" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 PURGE_TIME_OUT (*$COMMENT 37046 PURGE TIME*) : FINT;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="INT_OFFSET_IN" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 INT_OFFSET_IN (*$COMMENT 37047 WIPER_INTERVAL_OFFSET_IN*) : FINT;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="INT_OFFSET_OUT" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 INT_OFFSET_OUT (*$COMMENT 37048 WIPER MOTOR CYCLE TIME*) : FINT;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="INTERVAL_LENGTH_MIMIC" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 INTERVAL_LENGTH_MIMIC (*$COMMENT 37049 INTERVAL LENGTH*) : FINT;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="SPRAY_TIME_MEM" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 SPRAY_TIME_MEM (*$COMMENT 37051 SPRAY_TIME_TEMP*) : FINT;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="WASH_TIME_MEM" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 WASH_TIME_MEM (*$COMMENT 37052 WASH_TIME_TEMP*) : FINT;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="PURGE_TIME_MEM" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 PURGE_TIME_MEM (*$COMMENT 37053 PURGE_TIME_TEMP*) : FINT;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="PANEL_DIMMING_LEVEL" flags="00804000" disabled="0"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 PANEL_DIMMING_LEVEL (*$COMMENT 37057 PANEL DIMMING LEVEL*) : FINT;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="STATE_WIPER_FWD_PS_MIMIC" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 STATE_WIPER_FWD_PS_MIMIC (*$COMMENT 37082 STATE WIPER FWD PS*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="STATE_WIPER_FWD_C_MIMIC" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 STATE_WIPER_FWD_C_MIMIC (*$COMMENT 37083 STATE WIPER FWD C*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="STATE_WIPER_FWD_SB_MIMIC" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 STATE_WIPER_FWD_SB_MIMIC (*$COMMENT 37084 STATE WIPER FWD SB*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="STATE_WIPER_SIDE_PS_MIMIC" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 STATE_WIPER_SIDE_PS_MIMIC (*$COMMENT 37085 STATE WIPER SIDE PS*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="STATE_WIPER_SIDE_SB_MIMIC" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 STATE_WIPER_SIDE_SB_MIMIC (*$COMMENT 37086 STATE WIPER SIDE SB*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="STATE_WIPER_AFT_PS_MIMIC" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 STATE_WIPER_AFT_PS_MIMIC (*$COMMENT 37087 STATE WIPER AFT PS*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="STATE_WIPER_AFT_C_MIMIC" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 STATE_WIPER_AFT_C_MIMIC (*$COMMENT 37088 STATE WIPER AFT C*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="STATE_WIPER_AFT_SB_MIMIC" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 STATE_WIPER_AFT_SB_MIMIC (*$COMMENT 37089 STATE WIPER AFT SB*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="STATE_WIPER_AFT_BOT_MIMIC" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 STATE_WIPER_AFT_BOT_MIMIC (*$COMMENT 37090 STATE WIPER AFT BOT*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="STATE_WASH_FWD_MIMIC" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 STATE_WASH_FWD_MIMIC (*$COMMENT 37091  STATE WASH FWD*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="STATE_WASH_AFT_MIMIC" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 STATE_WASH_AFT_MIMIC (*$COMMENT 37092 STATE WASH AFT*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="STATE_HEAT_FWD_MIMIC" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 STATE_HEAT_FWD_MIMIC (*$COMMENT 37093 STATE HEAT FWD*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="STATE_HEAT_AFT_MIMIC" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 STATE_HEAT_AFT_MIMIC (*$COMMENT 37094 STATE HEAT AFT*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="STATE_SPEED_FWD_MIMIC" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 STATE_SPEED_FWD_MIMIC (*$COMMENT 37095 STATE SPEED FWD*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="STATE_SPEED_AFT_MIMIC" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 STATE_SPEED_AFT_MIMIC (*$COMMENT 37096 STATE SPEED AFT*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="WH_HORN2" flags="00804000" disabled="0"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 WH_HORN2 (*$COMMENT 37097 WH - HORN2*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="PS_FORE_HS_OUT" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 PS_FORE_HS_OUT (*$COMMENT 37101 PS FORE HS OUTPUT*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="C_FORE_HS_OUT" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 C_FORE_HS_OUT (*$COMMENT 37102 CENTER FORE HS OUTPUT*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="SB_FORE_HS_OUT" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 SB_FORE_HS_OUT (*$COMMENT 37103 SB FORE HS OUTPUT*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="PS_SIDE_HS_OUT" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 PS_SIDE_HS_OUT (*$COMMENT 37104 PS SIDE HS OUTPUT*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="SB_SIDE_HS_OUT" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 SB_SIDE_HS_OUT (*$COMMENT 37105 SB SIDE HS OUTPUT*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="PS_AFT_HS_OUT" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 PS_AFT_HS_OUT (*$COMMENT 37106 PS AFT HS OUTPUT*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="C_AFT_HS_OUT" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 C_AFT_HS_OUT (*$COMMENT 37107 CENTER AFT HS OUTPUT*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="SB_AFT_HS_OUT" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 SB_AFT_HS_OUT (*$COMMENT 37108 SB AFT HS OUTPUT*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="B_AFT_HS_OUT" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 B_AFT_HS_OUT (*$COMMENT 37109 BOTTOM AFT HS OUTPUT*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="SPRAY_FORE_OUT" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 SPRAY_FORE_OUT (*$COMMENT 37110 SPRAY FORE OUTPUT*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="HEAT_FORE_OUT" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 HEAT_FORE_OUT (*$COMMENT 37111 HEAT FORE OUTPUT*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="PURGE_FORE_OUT" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 PURGE_FORE_OUT (*$COMMENT 37112 PURGE FORE OUTPUT*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="PS_FORE_LS_OUT" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 PS_FORE_LS_OUT (*$COMMENT 37113 PS FORE LS OUTPUT*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="C_FORE_LS_OUT" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 C_FORE_LS_OUT (*$COMMENT 37114 CENTER FORE LS OUTPUT*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="SB_FORE_LS_OUT" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 SB_FORE_LS_OUT (*$COMMENT 37115 SB FORE LS OUTPUT*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="PS_SIDE_LS_OUT" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 PS_SIDE_LS_OUT (*$COMMENT 37116 PS SIDE LS OUTPUT*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="SB_SIDE_LS_OUT" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 SB_SIDE_LS_OUT (*$COMMENT 37117 SB SIDE LS OUTPUT*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="PS_AFT_LS_OUT" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 PS_AFT_LS_OUT (*$COMMENT 37118 PS AFT LS OUTPUT*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="C_AFT_LS_OUT" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 C_AFT_LS_OUT (*$COMMENT 37119 CENTER AFT LS OUTPUT*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="SB_AFT_LS_OUT" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 SB_AFT_LS_OUT (*$COMMENT 37120 SB AFT LS OUTPUT*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="B_AFT_LS_OUT" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 B_AFT_LS_OUT (*$COMMENT 37121 BOTTOM AFT LS OUTPUT*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="SPRAY_AFT_OUT" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 SPRAY_AFT_OUT (*$COMMENT 37122 SPRAY AFT OUTPUT*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="HEAT_AFT_OUT" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 HEAT_AFT_OUT (*$COMMENT 37123 HEAT AFT OUTPUT*) : BOOL;
END_VAR]]></ITEM>
      <ITEM type="VAR" name="PURGE_AFT_OUT" flags="00804000"><![CDATA[VAR_GLOBAL (*$CHANNEL*) 
 PURGE_AFT_OUT (*$COMMENT 37124 PURGE AFT OUTPUT*) : BOOL;
END_VAR]]></ITEM>
    </GLOBAL>
    <TASK>
      <ITEM type="TSK" name="TASK" loop_kind="0" interval="100"><![CDATA[P01_GENERAL
VAR__GLOBAL
SYSTEM
PAGE_NAVIGATION
PG_ALARM
PG_MENU
P02_MAIN
AUDIBLE
]]></ITEM>
    </TASK>
  </PROJECT>
</PAL1131>


